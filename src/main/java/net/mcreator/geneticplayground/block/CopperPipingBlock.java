package net.mcreator.geneticplayground.block;

import org.checkerframework.checker.units.qual.s;

import net.minecraft.world.phys.shapes.VoxelShape;
import net.minecraft.world.phys.shapes.Shapes;
import net.minecraft.world.phys.shapes.CollisionContext;
import net.minecraft.world.level.material.PushReaction;
import net.minecraft.world.level.block.state.properties.IntegerProperty;
import net.minecraft.world.level.block.state.properties.DirectionProperty;
import net.minecraft.world.level.block.state.StateDefinition;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.block.state.BlockBehaviour;
import net.minecraft.world.level.block.entity.BlockEntity;
import net.minecraft.world.level.block.SoundType;
import net.minecraft.world.level.block.Rotation;
import net.minecraft.world.level.block.Mirror;
import net.minecraft.world.level.block.EntityBlock;
import net.minecraft.world.level.block.DirectionalBlock;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.BlockGetter;
import net.minecraft.world.item.context.BlockPlaceContext;
import net.minecraft.world.inventory.AbstractContainerMenu;
import net.minecraft.world.MenuProvider;
import net.minecraft.world.Containers;
import net.minecraft.core.Direction;
import net.minecraft.core.BlockPos;

import net.mcreator.geneticplayground.procedures.CopperPipingNeighbourBlockChangesProcedure;
import net.mcreator.geneticplayground.block.entity.CopperPipingBlockEntity;

public class CopperPipingBlock extends Block implements EntityBlock {
	public static final IntegerProperty BLOCKSTATE = IntegerProperty.create("blockstate", 0, 12);
	public static final DirectionProperty FACING = DirectionalBlock.FACING;

	public CopperPipingBlock() {
		super(BlockBehaviour.Properties.of().sound(SoundType.COPPER).strength(1f, 10f).lightLevel(s -> (new Object() {
			public int getLightLevel() {
				if (s.getValue(BLOCKSTATE) == 1)
					return 0;
				if (s.getValue(BLOCKSTATE) == 2)
					return 0;
				if (s.getValue(BLOCKSTATE) == 3)
					return 0;
				if (s.getValue(BLOCKSTATE) == 4)
					return 0;
				if (s.getValue(BLOCKSTATE) == 5)
					return 0;
				if (s.getValue(BLOCKSTATE) == 6)
					return 0;
				if (s.getValue(BLOCKSTATE) == 7)
					return 0;
				if (s.getValue(BLOCKSTATE) == 8)
					return 0;
				if (s.getValue(BLOCKSTATE) == 9)
					return 0;
				if (s.getValue(BLOCKSTATE) == 10)
					return 0;
				if (s.getValue(BLOCKSTATE) == 11)
					return 0;
				if (s.getValue(BLOCKSTATE) == 12)
					return 0;
				return 0;
			}
		}.getLightLevel())).noOcclusion().pushReaction(PushReaction.DESTROY).isRedstoneConductor((bs, br, bp) -> false).dynamicShape());
		this.registerDefaultState(this.stateDefinition.any().setValue(FACING, Direction.NORTH));
	}

	@Override
	public boolean propagatesSkylightDown(BlockState state, BlockGetter reader, BlockPos pos) {
		return true;
	}

	@Override
	public int getLightBlock(BlockState state, BlockGetter worldIn, BlockPos pos) {
		return 0;
	}

	@Override
	public VoxelShape getVisualShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
		return Shapes.empty();
	}

	@Override
	public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
		if (state.getValue(BLOCKSTATE) == 1) {
			return switch (state.getValue(FACING)) {
				default -> Shapes.or(box(6, 6, 1, 10, 10, 8), box(9.85, 5.25, 8, 10.75, 9.85, 9), box(5.25, 5.25, 8, 9.85, 6.15, 9), box(5.25, 6.15, 8, 6.15, 9.85, 9), box(5.25, 9.85, 8, 10.75, 10.75, 9), box(5.25, 9.85, 0, 10.75, 10.75, 1),
						box(5.25, 6.15, 0, 6.15, 9.85, 1), box(5.25, 5.25, 0, 9.85, 6.15, 1), box(9.85, 5.25, 0, 10.75, 9.85, 1));
				case NORTH -> Shapes.or(box(6, 6, 8, 10, 10, 15), box(5.25, 5.25, 7, 6.15, 9.85, 8), box(6.15, 5.25, 7, 10.75, 6.15, 8), box(9.85, 6.15, 7, 10.75, 9.85, 8), box(5.25, 9.85, 7, 10.75, 10.75, 8), box(5.25, 9.85, 15, 10.75, 10.75, 16),
						box(9.85, 6.15, 15, 10.75, 9.85, 16), box(6.15, 5.25, 15, 10.75, 6.15, 16), box(5.25, 5.25, 15, 6.15, 9.85, 16));
				case EAST -> Shapes.or(box(1, 6, 6, 8, 10, 10), box(8, 5.25, 5.25, 9, 9.85, 6.15), box(8, 5.25, 6.15, 9, 6.15, 10.75), box(8, 6.15, 9.85, 9, 9.85, 10.75), box(8, 9.85, 5.25, 9, 10.75, 10.75), box(0, 9.85, 5.25, 1, 10.75, 10.75),
						box(0, 6.15, 9.85, 1, 9.85, 10.75), box(0, 5.25, 6.15, 1, 6.15, 10.75), box(0, 5.25, 5.25, 1, 9.85, 6.15));
				case WEST -> Shapes.or(box(8, 6, 6, 15, 10, 10), box(7, 5.25, 9.85, 8, 9.85, 10.75), box(7, 5.25, 5.25, 8, 6.15, 9.85), box(7, 6.15, 5.25, 8, 9.85, 6.15), box(7, 9.85, 5.25, 8, 10.75, 10.75), box(15, 9.85, 5.25, 16, 10.75, 10.75),
						box(15, 6.15, 5.25, 16, 9.85, 6.15), box(15, 5.25, 5.25, 16, 6.15, 9.85), box(15, 5.25, 9.85, 16, 9.85, 10.75));
				case UP -> Shapes.or(box(6, 1, 6, 10, 8, 10), box(5.25, 8, 5.25, 6.15, 9, 9.85), box(6.15, 8, 5.25, 10.75, 9, 6.15), box(9.85, 8, 6.15, 10.75, 9, 9.85), box(5.25, 8, 9.85, 10.75, 9, 10.75), box(5.25, 0, 9.85, 10.75, 1, 10.75),
						box(9.85, 0, 6.15, 10.75, 1, 9.85), box(6.15, 0, 5.25, 10.75, 1, 6.15), box(5.25, 0, 5.25, 6.15, 1, 9.85));
				case DOWN -> Shapes.or(box(6, 8, 6, 10, 15, 10), box(5.25, 7, 6.15, 6.15, 8, 10.75), box(6.15, 7, 9.85, 10.75, 8, 10.75), box(9.85, 7, 6.15, 10.75, 8, 9.85), box(5.25, 7, 5.25, 10.75, 8, 6.15), box(5.25, 15, 5.25, 10.75, 16, 6.15),
						box(9.85, 15, 6.15, 10.75, 16, 9.85), box(6.15, 15, 9.85, 10.75, 16, 10.75), box(5.25, 15, 6.15, 6.15, 16, 10.75));
			};
		}
		if (state.getValue(BLOCKSTATE) == 2) {
			return switch (state.getValue(FACING)) {
				default -> Shapes.or(box(6, 6, 1, 10, 10, 8), box(6, 6, 8, 10, 10, 15), box(5.25, 6.15, 15, 6.15, 9.85, 16), box(5.25, 9.85, 15, 10.75, 10.75, 16), box(9.85, 5.25, 15, 10.75, 9.85, 16), box(5.25, 5.25, 15, 9.85, 6.15, 16),
						box(5.25, 9.85, 0, 10.75, 10.75, 1), box(5.25, 6.15, 0, 6.15, 9.85, 1), box(5.25, 5.25, 0, 9.85, 6.15, 1), box(9.85, 5.25, 0, 10.75, 9.85, 1));
				case NORTH -> Shapes.or(box(6, 6, 8, 10, 10, 15), box(6, 6, 1, 10, 10, 8), box(9.85, 6.15, 0, 10.75, 9.85, 1), box(5.25, 9.85, 0, 10.75, 10.75, 1), box(5.25, 5.25, 0, 6.15, 9.85, 1), box(6.15, 5.25, 0, 10.75, 6.15, 1),
						box(5.25, 9.85, 15, 10.75, 10.75, 16), box(9.85, 6.15, 15, 10.75, 9.85, 16), box(6.15, 5.25, 15, 10.75, 6.15, 16), box(5.25, 5.25, 15, 6.15, 9.85, 16));
				case EAST -> Shapes.or(box(1, 6, 6, 8, 10, 10), box(8, 6, 6, 15, 10, 10), box(15, 6.15, 9.85, 16, 9.85, 10.75), box(15, 9.85, 5.25, 16, 10.75, 10.75), box(15, 5.25, 5.25, 16, 9.85, 6.15), box(15, 5.25, 6.15, 16, 6.15, 10.75),
						box(0, 9.85, 5.25, 1, 10.75, 10.75), box(0, 6.15, 9.85, 1, 9.85, 10.75), box(0, 5.25, 6.15, 1, 6.15, 10.75), box(0, 5.25, 5.25, 1, 9.85, 6.15));
				case WEST -> Shapes.or(box(8, 6, 6, 15, 10, 10), box(1, 6, 6, 8, 10, 10), box(0, 6.15, 5.25, 1, 9.85, 6.15), box(0, 9.85, 5.25, 1, 10.75, 10.75), box(0, 5.25, 9.85, 1, 9.85, 10.75), box(0, 5.25, 5.25, 1, 6.15, 9.85),
						box(15, 9.85, 5.25, 16, 10.75, 10.75), box(15, 6.15, 5.25, 16, 9.85, 6.15), box(15, 5.25, 5.25, 16, 6.15, 9.85), box(15, 5.25, 9.85, 16, 9.85, 10.75));
				case UP -> Shapes.or(box(6, 1, 6, 10, 8, 10), box(6, 8, 6, 10, 15, 10), box(9.85, 15, 6.15, 10.75, 16, 9.85), box(5.25, 15, 9.85, 10.75, 16, 10.75), box(5.25, 15, 5.25, 6.15, 16, 9.85), box(6.15, 15, 5.25, 10.75, 16, 6.15),
						box(5.25, 0, 9.85, 10.75, 1, 10.75), box(9.85, 0, 6.15, 10.75, 1, 9.85), box(6.15, 0, 5.25, 10.75, 1, 6.15), box(5.25, 0, 5.25, 6.15, 1, 9.85));
				case DOWN -> Shapes.or(box(6, 8, 6, 10, 15, 10), box(6, 1, 6, 10, 8, 10), box(9.85, 0, 6.15, 10.75, 1, 9.85), box(5.25, 0, 5.25, 10.75, 1, 6.15), box(5.25, 0, 6.15, 6.15, 1, 10.75), box(6.15, 0, 9.85, 10.75, 1, 10.75),
						box(5.25, 15, 5.25, 10.75, 16, 6.15), box(9.85, 15, 6.15, 10.75, 16, 9.85), box(6.15, 15, 9.85, 10.75, 16, 10.75), box(5.25, 15, 6.15, 6.15, 16, 10.75));
			};
		}
		if (state.getValue(BLOCKSTATE) == 3) {
			return switch (state.getValue(FACING)) {
				default -> Shapes.or(box(6, 6, 1, 10, 10, 8), box(10, 6, 6, 15, 10, 10), box(15, 6.15, 9.85, 16, 9.85, 10.75), box(15, 9.85, 5.25, 16, 10.75, 10.75), box(15, 5.25, 5.25, 16, 9.85, 6.15), box(15, 5.25, 6.15, 16, 6.15, 10.75),
						box(5.25, 9.85, 0, 10.75, 10.75, 1), box(5.25, 6.15, 0, 6.15, 9.85, 1), box(5.25, 5.25, 0, 9.85, 6.15, 1), box(9.85, 5.25, 0, 10.75, 9.85, 1), box(6, 6, 8, 10, 10, 10));
				case NORTH -> Shapes.or(box(6, 6, 8, 10, 10, 15), box(1, 6, 6, 6, 10, 10), box(0, 6.15, 5.25, 1, 9.85, 6.15), box(0, 9.85, 5.25, 1, 10.75, 10.75), box(0, 5.25, 9.85, 1, 9.85, 10.75), box(0, 5.25, 5.25, 1, 6.15, 9.85),
						box(5.25, 9.85, 15, 10.75, 10.75, 16), box(9.85, 6.15, 15, 10.75, 9.85, 16), box(6.15, 5.25, 15, 10.75, 6.15, 16), box(5.25, 5.25, 15, 6.15, 9.85, 16), box(6, 6, 6, 10, 10, 8));
				case EAST -> Shapes.or(box(1, 6, 6, 8, 10, 10), box(6, 6, 1, 10, 10, 6), box(9.85, 6.15, 0, 10.75, 9.85, 1), box(5.25, 9.85, 0, 10.75, 10.75, 1), box(5.25, 5.25, 0, 6.15, 9.85, 1), box(6.15, 5.25, 0, 10.75, 6.15, 1),
						box(0, 9.85, 5.25, 1, 10.75, 10.75), box(0, 6.15, 9.85, 1, 9.85, 10.75), box(0, 5.25, 6.15, 1, 6.15, 10.75), box(0, 5.25, 5.25, 1, 9.85, 6.15), box(8, 6, 6, 10, 10, 10));
				case WEST -> Shapes.or(box(8, 6, 6, 15, 10, 10), box(6, 6, 10, 10, 10, 15), box(5.25, 6.15, 15, 6.15, 9.85, 16), box(5.25, 9.85, 15, 10.75, 10.75, 16), box(9.85, 5.25, 15, 10.75, 9.85, 16), box(5.25, 5.25, 15, 9.85, 6.15, 16),
						box(15, 9.85, 5.25, 16, 10.75, 10.75), box(15, 6.15, 5.25, 16, 9.85, 6.15), box(15, 5.25, 5.25, 16, 6.15, 9.85), box(15, 5.25, 9.85, 16, 9.85, 10.75), box(6, 6, 6, 8, 10, 10));
				case UP -> Shapes.or(box(6, 1, 6, 10, 8, 10), box(1, 6, 6, 6, 10, 10), box(0, 9.85, 6.15, 1, 10.75, 9.85), box(0, 5.25, 9.85, 1, 10.75, 10.75), box(0, 5.25, 5.25, 1, 6.15, 9.85), box(0, 6.15, 5.25, 1, 10.75, 6.15),
						box(5.25, 0, 9.85, 10.75, 1, 10.75), box(9.85, 0, 6.15, 10.75, 1, 9.85), box(6.15, 0, 5.25, 10.75, 1, 6.15), box(5.25, 0, 5.25, 6.15, 1, 9.85), box(6, 8, 6, 10, 10, 10));
				case DOWN -> Shapes.or(box(6, 8, 6, 10, 15, 10), box(1, 6, 6, 6, 10, 10), box(0, 5.25, 6.15, 1, 6.15, 9.85), box(0, 5.25, 5.25, 1, 10.75, 6.15), box(0, 9.85, 6.15, 1, 10.75, 10.75), box(0, 5.25, 9.85, 1, 9.85, 10.75),
						box(5.25, 15, 5.25, 10.75, 16, 6.15), box(9.85, 15, 6.15, 10.75, 16, 9.85), box(6.15, 15, 9.85, 10.75, 16, 10.75), box(5.25, 15, 6.15, 6.15, 16, 10.75), box(6, 6, 6, 10, 8, 10));
			};
		}
		if (state.getValue(BLOCKSTATE) == 4) {
			return switch (state.getValue(FACING)) {
				default -> Shapes.or(box(6, 6, 1, 10, 10, 8), box(10, 6, 6, 15, 10, 10), box(15, 9.85, 5.25, 16, 10.75, 10.75), box(15, 6.15, 9.85, 16, 9.85, 10.75), box(15, 5.25, 6.15, 16, 6.15, 10.75), box(15, 5.25, 5.25, 16, 9.85, 6.15),
						box(0, 5.25, 9.85, 1, 9.85, 10.75), box(0, 5.25, 5.25, 1, 6.15, 9.85), box(0, 6.15, 5.25, 1, 9.85, 6.15), box(0, 9.85, 5.25, 1, 10.75, 10.75), box(1, 6, 6, 6, 10, 10), box(5.25, 9.85, 0, 10.75, 10.75, 1),
						box(5.25, 6.15, 0, 6.15, 9.85, 1), box(5.25, 5.25, 0, 9.85, 6.15, 1), box(9.85, 5.25, 0, 10.75, 9.85, 1), box(6, 6, 8, 10, 10, 10));
				case NORTH -> Shapes.or(box(6, 6, 8, 10, 10, 15), box(1, 6, 6, 6, 10, 10), box(0, 9.85, 5.25, 1, 10.75, 10.75), box(0, 6.15, 5.25, 1, 9.85, 6.15), box(0, 5.25, 5.25, 1, 6.15, 9.85), box(0, 5.25, 9.85, 1, 9.85, 10.75),
						box(15, 5.25, 5.25, 16, 9.85, 6.15), box(15, 5.25, 6.15, 16, 6.15, 10.75), box(15, 6.15, 9.85, 16, 9.85, 10.75), box(15, 9.85, 5.25, 16, 10.75, 10.75), box(10, 6, 6, 15, 10, 10), box(5.25, 9.85, 15, 10.75, 10.75, 16),
						box(9.85, 6.15, 15, 10.75, 9.85, 16), box(6.15, 5.25, 15, 10.75, 6.15, 16), box(5.25, 5.25, 15, 6.15, 9.85, 16), box(6, 6, 6, 10, 10, 8));
				case EAST -> Shapes.or(box(1, 6, 6, 8, 10, 10), box(6, 6, 1, 10, 10, 6), box(5.25, 9.85, 0, 10.75, 10.75, 1), box(9.85, 6.15, 0, 10.75, 9.85, 1), box(6.15, 5.25, 0, 10.75, 6.15, 1), box(5.25, 5.25, 0, 6.15, 9.85, 1),
						box(9.85, 5.25, 15, 10.75, 9.85, 16), box(5.25, 5.25, 15, 9.85, 6.15, 16), box(5.25, 6.15, 15, 6.15, 9.85, 16), box(5.25, 9.85, 15, 10.75, 10.75, 16), box(6, 6, 10, 10, 10, 15), box(0, 9.85, 5.25, 1, 10.75, 10.75),
						box(0, 6.15, 9.85, 1, 9.85, 10.75), box(0, 5.25, 6.15, 1, 6.15, 10.75), box(0, 5.25, 5.25, 1, 9.85, 6.15), box(8, 6, 6, 10, 10, 10));
				case WEST -> Shapes.or(box(8, 6, 6, 15, 10, 10), box(6, 6, 10, 10, 10, 15), box(5.25, 9.85, 15, 10.75, 10.75, 16), box(5.25, 6.15, 15, 6.15, 9.85, 16), box(5.25, 5.25, 15, 9.85, 6.15, 16), box(9.85, 5.25, 15, 10.75, 9.85, 16),
						box(5.25, 5.25, 0, 6.15, 9.85, 1), box(6.15, 5.25, 0, 10.75, 6.15, 1), box(9.85, 6.15, 0, 10.75, 9.85, 1), box(5.25, 9.85, 0, 10.75, 10.75, 1), box(6, 6, 1, 10, 10, 6), box(15, 9.85, 5.25, 16, 10.75, 10.75),
						box(15, 6.15, 5.25, 16, 9.85, 6.15), box(15, 5.25, 5.25, 16, 6.15, 9.85), box(15, 5.25, 9.85, 16, 9.85, 10.75), box(6, 6, 6, 8, 10, 10));
				case UP -> Shapes.or(box(6, 1, 6, 10, 8, 10), box(1, 6, 6, 6, 10, 10), box(0, 5.25, 9.85, 1, 10.75, 10.75), box(0, 9.85, 6.15, 1, 10.75, 9.85), box(0, 6.15, 5.25, 1, 10.75, 6.15), box(0, 5.25, 5.25, 1, 6.15, 9.85),
						box(15, 9.85, 5.25, 16, 10.75, 9.85), box(15, 5.25, 5.25, 16, 9.85, 6.15), box(15, 5.25, 6.15, 16, 6.15, 9.85), box(15, 5.25, 9.85, 16, 10.75, 10.75), box(10, 6, 6, 15, 10, 10), box(5.25, 0, 9.85, 10.75, 1, 10.75),
						box(9.85, 0, 6.15, 10.75, 1, 9.85), box(6.15, 0, 5.25, 10.75, 1, 6.15), box(5.25, 0, 5.25, 6.15, 1, 9.85), box(6, 8, 6, 10, 10, 10));
				case DOWN -> Shapes.or(box(6, 8, 6, 10, 15, 10), box(1, 6, 6, 6, 10, 10), box(0, 5.25, 5.25, 1, 10.75, 6.15), box(0, 5.25, 6.15, 1, 6.15, 9.85), box(0, 5.25, 9.85, 1, 9.85, 10.75), box(0, 9.85, 6.15, 1, 10.75, 10.75),
						box(15, 5.25, 6.15, 16, 6.15, 10.75), box(15, 6.15, 9.85, 16, 10.75, 10.75), box(15, 9.85, 6.15, 16, 10.75, 9.85), box(15, 5.25, 5.25, 16, 10.75, 6.15), box(10, 6, 6, 15, 10, 10), box(5.25, 15, 5.25, 10.75, 16, 6.15),
						box(9.85, 15, 6.15, 10.75, 16, 9.85), box(6.15, 15, 9.85, 10.75, 16, 10.75), box(5.25, 15, 6.15, 6.15, 16, 10.75), box(6, 6, 6, 10, 8, 10));
			};
		}
		if (state.getValue(BLOCKSTATE) == 5) {
			return switch (state.getValue(FACING)) {
				default -> Shapes.or(box(6, 6, 1, 10, 10, 8), box(6, 6, 8, 10, 10, 15), box(10, 6, 6, 15, 10, 10), box(15, 9.85, 5.25, 16, 10.75, 10.75), box(15, 6.15, 9.85, 16, 9.85, 10.75), box(15, 5.25, 6.15, 16, 6.15, 10.75),
						box(15, 5.25, 5.25, 16, 9.85, 6.15), box(0, 5.25, 9.85, 1, 9.85, 10.75), box(0, 5.25, 5.25, 1, 6.15, 9.85), box(0, 6.15, 5.25, 1, 9.85, 6.15), box(0, 9.85, 5.25, 1, 10.75, 10.75), box(1, 6, 6, 6, 10, 10),
						box(5.25, 9.85, 0, 10.75, 10.75, 1), box(5.25, 6.15, 0, 6.15, 9.85, 1), box(5.25, 5.25, 0, 9.85, 6.15, 1), box(9.85, 5.25, 0, 10.75, 9.85, 1), box(5.25, 9.85, 15, 10.75, 10.75, 16), box(9.85, 5.25, 15, 10.75, 9.85, 16),
						box(5.25, 5.25, 15, 9.85, 6.15, 16), box(5.25, 6.15, 15, 6.15, 9.85, 16));
				case NORTH -> Shapes.or(box(6, 6, 8, 10, 10, 15), box(6, 6, 1, 10, 10, 8), box(1, 6, 6, 6, 10, 10), box(0, 9.85, 5.25, 1, 10.75, 10.75), box(0, 6.15, 5.25, 1, 9.85, 6.15), box(0, 5.25, 5.25, 1, 6.15, 9.85),
						box(0, 5.25, 9.85, 1, 9.85, 10.75), box(15, 5.25, 5.25, 16, 9.85, 6.15), box(15, 5.25, 6.15, 16, 6.15, 10.75), box(15, 6.15, 9.85, 16, 9.85, 10.75), box(15, 9.85, 5.25, 16, 10.75, 10.75), box(10, 6, 6, 15, 10, 10),
						box(5.25, 9.85, 15, 10.75, 10.75, 16), box(9.85, 6.15, 15, 10.75, 9.85, 16), box(6.15, 5.25, 15, 10.75, 6.15, 16), box(5.25, 5.25, 15, 6.15, 9.85, 16), box(5.25, 9.85, 0, 10.75, 10.75, 1), box(5.25, 5.25, 0, 6.15, 9.85, 1),
						box(6.15, 5.25, 0, 10.75, 6.15, 1), box(9.85, 6.15, 0, 10.75, 9.85, 1));
				case EAST -> Shapes.or(box(1, 6, 6, 8, 10, 10), box(8, 6, 6, 15, 10, 10), box(6, 6, 1, 10, 10, 6), box(5.25, 9.85, 0, 10.75, 10.75, 1), box(9.85, 6.15, 0, 10.75, 9.85, 1), box(6.15, 5.25, 0, 10.75, 6.15, 1),
						box(5.25, 5.25, 0, 6.15, 9.85, 1), box(9.85, 5.25, 15, 10.75, 9.85, 16), box(5.25, 5.25, 15, 9.85, 6.15, 16), box(5.25, 6.15, 15, 6.15, 9.85, 16), box(5.25, 9.85, 15, 10.75, 10.75, 16), box(6, 6, 10, 10, 10, 15),
						box(0, 9.85, 5.25, 1, 10.75, 10.75), box(0, 6.15, 9.85, 1, 9.85, 10.75), box(0, 5.25, 6.15, 1, 6.15, 10.75), box(0, 5.25, 5.25, 1, 9.85, 6.15), box(15, 9.85, 5.25, 16, 10.75, 10.75), box(15, 5.25, 5.25, 16, 9.85, 6.15),
						box(15, 5.25, 6.15, 16, 6.15, 10.75), box(15, 6.15, 9.85, 16, 9.85, 10.75));
				case WEST -> Shapes.or(box(8, 6, 6, 15, 10, 10), box(1, 6, 6, 8, 10, 10), box(6, 6, 10, 10, 10, 15), box(5.25, 9.85, 15, 10.75, 10.75, 16), box(5.25, 6.15, 15, 6.15, 9.85, 16), box(5.25, 5.25, 15, 9.85, 6.15, 16),
						box(9.85, 5.25, 15, 10.75, 9.85, 16), box(5.25, 5.25, 0, 6.15, 9.85, 1), box(6.15, 5.25, 0, 10.75, 6.15, 1), box(9.85, 6.15, 0, 10.75, 9.85, 1), box(5.25, 9.85, 0, 10.75, 10.75, 1), box(6, 6, 1, 10, 10, 6),
						box(15, 9.85, 5.25, 16, 10.75, 10.75), box(15, 6.15, 5.25, 16, 9.85, 6.15), box(15, 5.25, 5.25, 16, 6.15, 9.85), box(15, 5.25, 9.85, 16, 9.85, 10.75), box(0, 9.85, 5.25, 1, 10.75, 10.75), box(0, 5.25, 9.85, 1, 9.85, 10.75),
						box(0, 5.25, 5.25, 1, 6.15, 9.85), box(0, 6.15, 5.25, 1, 9.85, 6.15));
				case UP -> Shapes.or(box(6, 1, 6, 10, 8, 10), box(6, 8, 6, 10, 15, 10), box(1, 6, 6, 6, 10, 10), box(0, 5.25, 9.85, 1, 10.75, 10.75), box(0, 9.85, 6.15, 1, 10.75, 9.85), box(0, 6.15, 5.25, 1, 10.75, 6.15),
						box(0, 5.25, 5.25, 1, 6.15, 9.85), box(15, 9.85, 5.25, 16, 10.75, 9.85), box(15, 5.25, 5.25, 16, 9.85, 6.15), box(15, 5.25, 6.15, 16, 6.15, 9.85), box(15, 5.25, 9.85, 16, 10.75, 10.75), box(10, 6, 6, 15, 10, 10),
						box(5.25, 0, 9.85, 10.75, 1, 10.75), box(9.85, 0, 6.15, 10.75, 1, 9.85), box(6.15, 0, 5.25, 10.75, 1, 6.15), box(5.25, 0, 5.25, 6.15, 1, 9.85), box(5.25, 15, 9.85, 10.75, 16, 10.75), box(5.25, 15, 5.25, 6.15, 16, 9.85),
						box(6.15, 15, 5.25, 10.75, 16, 6.15), box(9.85, 15, 6.15, 10.75, 16, 9.85));
				case DOWN -> Shapes.or(box(6, 8, 6, 10, 15, 10), box(6, 1, 6, 10, 8, 10), box(1, 6, 6, 6, 10, 10), box(0, 5.25, 5.25, 1, 10.75, 6.15), box(0, 5.25, 6.15, 1, 6.15, 9.85), box(0, 5.25, 9.85, 1, 9.85, 10.75),
						box(0, 9.85, 6.15, 1, 10.75, 10.75), box(15, 5.25, 6.15, 16, 6.15, 10.75), box(15, 6.15, 9.85, 16, 10.75, 10.75), box(15, 9.85, 6.15, 16, 10.75, 9.85), box(15, 5.25, 5.25, 16, 10.75, 6.15), box(10, 6, 6, 15, 10, 10),
						box(5.25, 15, 5.25, 10.75, 16, 6.15), box(9.85, 15, 6.15, 10.75, 16, 9.85), box(6.15, 15, 9.85, 10.75, 16, 10.75), box(5.25, 15, 6.15, 6.15, 16, 10.75), box(5.25, 0, 5.25, 10.75, 1, 6.15), box(5.25, 0, 6.15, 6.15, 1, 10.75),
						box(6.15, 0, 9.85, 10.75, 1, 10.75), box(9.85, 0, 6.15, 10.75, 1, 9.85));
			};
		}
		if (state.getValue(BLOCKSTATE) == 6) {
			return switch (state.getValue(FACING)) {
				default -> Shapes.or(box(6, 6, 1, 10, 10, 8), box(6.15, 16, 5.25, 10.75, 17, 6.15), box(9.85, 16, 6.15, 10.75, 17, 10.75), box(6.15, 16, 9.85, 9.85, 17, 10.75), box(5.25, 16, 5.25, 6.15, 17, 10.75), box(6, 10, 6, 10, 16, 10),
						box(5.25, 9.85, 0, 10.75, 10.75, 1), box(5.25, 6.15, 0, 6.15, 9.85, 1), box(5.25, 5.25, 0, 9.85, 6.15, 1), box(9.85, 5.25, 0, 10.75, 9.85, 1), box(6, 6, 8, 10, 10, 10));
				case NORTH -> Shapes.or(box(6, 6, 8, 10, 10, 15), box(5.25, 16, 9.85, 9.85, 17, 10.75), box(5.25, 16, 5.25, 6.15, 17, 9.85), box(6.15, 16, 5.25, 9.85, 17, 6.15), box(9.85, 16, 5.25, 10.75, 17, 10.75), box(6, 10, 6, 10, 16, 10),
						box(5.25, 9.85, 15, 10.75, 10.75, 16), box(9.85, 6.15, 15, 10.75, 9.85, 16), box(6.15, 5.25, 15, 10.75, 6.15, 16), box(5.25, 5.25, 15, 6.15, 9.85, 16), box(6, 6, 6, 10, 10, 8));
				case EAST -> Shapes.or(box(1, 6, 6, 8, 10, 10), box(5.25, 16, 5.25, 6.15, 17, 9.85), box(6.15, 16, 5.25, 10.75, 17, 6.15), box(9.85, 16, 6.15, 10.75, 17, 9.85), box(5.25, 16, 9.85, 10.75, 17, 10.75), box(6, 10, 6, 10, 16, 10),
						box(0, 9.85, 5.25, 1, 10.75, 10.75), box(0, 6.15, 9.85, 1, 9.85, 10.75), box(0, 5.25, 6.15, 1, 6.15, 10.75), box(0, 5.25, 5.25, 1, 9.85, 6.15), box(8, 6, 6, 10, 10, 10));
				case WEST -> Shapes.or(box(8, 6, 6, 15, 10, 10), box(9.85, 16, 6.15, 10.75, 17, 10.75), box(5.25, 16, 9.85, 9.85, 17, 10.75), box(5.25, 16, 6.15, 6.15, 17, 9.85), box(5.25, 16, 5.25, 10.75, 17, 6.15), box(6, 10, 6, 10, 16, 10),
						box(15, 9.85, 5.25, 16, 10.75, 10.75), box(15, 6.15, 5.25, 16, 9.85, 6.15), box(15, 5.25, 5.25, 16, 6.15, 9.85), box(15, 5.25, 9.85, 16, 9.85, 10.75), box(6, 6, 6, 8, 10, 10));
				case UP -> Shapes.or(box(6, 1, 6, 10, 8, 10), box(5.25, 5.25, 16, 9.85, 6.15, 17), box(5.25, 6.15, 16, 6.15, 10.75, 17), box(6.15, 9.85, 16, 9.85, 10.75, 17), box(9.85, 5.25, 16, 10.75, 10.75, 17), box(6, 6, 10, 10, 10, 16),
						box(5.25, 0, 9.85, 10.75, 1, 10.75), box(9.85, 0, 6.15, 10.75, 1, 9.85), box(6.15, 0, 5.25, 10.75, 1, 6.15), box(5.25, 0, 5.25, 6.15, 1, 9.85), box(6, 8, 6, 10, 10, 10));
				case DOWN -> Shapes.or(box(6, 8, 6, 10, 15, 10), box(5.25, 9.85, -1, 9.85, 10.75, 0), box(5.25, 5.25, -1, 6.15, 9.85, 0), box(6.15, 5.25, -1, 9.85, 6.15, 0), box(9.85, 5.25, -1, 10.75, 10.75, 0), box(6, 6, 0, 10, 10, 6),
						box(5.25, 15, 5.25, 10.75, 16, 6.15), box(9.85, 15, 6.15, 10.75, 16, 9.85), box(6.15, 15, 9.85, 10.75, 16, 10.75), box(5.25, 15, 6.15, 6.15, 16, 10.75), box(6, 6, 6, 10, 8, 10));
			};
		}
		if (state.getValue(BLOCKSTATE) == 7) {
			return switch (state.getValue(FACING)) {
				default -> Shapes.or(box(6, 6, 1, 10, 10, 8), box(6, 1, 6, 10, 6, 10), box(5.25, 0, 5.25, 6.15, 1, 10.75), box(6.15, 0, 9.85, 9.85, 1, 10.75), box(9.85, 0, 6.15, 10.75, 1, 10.75), box(6.15, 0, 5.25, 10.75, 1, 6.15),
						box(5.25, 9.85, 0, 10.75, 10.75, 1), box(5.25, 6.15, 0, 6.15, 9.85, 1), box(5.25, 5.25, 0, 9.85, 6.15, 1), box(9.85, 5.25, 0, 10.75, 9.85, 1), box(6, 6, 8, 10, 10, 10));
				case NORTH -> Shapes.or(box(6, 6, 8, 10, 10, 15), box(6, 1, 6, 10, 6, 10), box(9.85, 0, 5.25, 10.75, 1, 10.75), box(6.15, 0, 5.25, 9.85, 1, 6.15), box(5.25, 0, 5.25, 6.15, 1, 9.85), box(5.25, 0, 9.85, 9.85, 1, 10.75),
						box(5.25, 9.85, 15, 10.75, 10.75, 16), box(9.85, 6.15, 15, 10.75, 9.85, 16), box(6.15, 5.25, 15, 10.75, 6.15, 16), box(5.25, 5.25, 15, 6.15, 9.85, 16), box(6, 6, 6, 10, 10, 8));
				case EAST -> Shapes.or(box(1, 6, 6, 8, 10, 10), box(6, 1, 6, 10, 6, 10), box(5.25, 0, 9.85, 10.75, 1, 10.75), box(9.85, 0, 6.15, 10.75, 1, 9.85), box(6.15, 0, 5.25, 10.75, 1, 6.15), box(5.25, 0, 5.25, 6.15, 1, 9.85),
						box(0, 9.85, 5.25, 1, 10.75, 10.75), box(0, 6.15, 9.85, 1, 9.85, 10.75), box(0, 5.25, 6.15, 1, 6.15, 10.75), box(0, 5.25, 5.25, 1, 9.85, 6.15), box(8, 6, 6, 10, 10, 10));
				case WEST -> Shapes.or(box(8, 6, 6, 15, 10, 10), box(6, 1, 6, 10, 6, 10), box(5.25, 0, 5.25, 10.75, 1, 6.15), box(5.25, 0, 6.15, 6.15, 1, 9.85), box(5.25, 0, 9.85, 9.85, 1, 10.75), box(9.85, 0, 6.15, 10.75, 1, 10.75),
						box(15, 9.85, 5.25, 16, 10.75, 10.75), box(15, 6.15, 5.25, 16, 9.85, 6.15), box(15, 5.25, 5.25, 16, 6.15, 9.85), box(15, 5.25, 9.85, 16, 9.85, 10.75), box(6, 6, 6, 8, 10, 10));
				case UP -> Shapes.or(box(6, 1, 6, 10, 8, 10), box(6, 6, 1, 10, 10, 6), box(9.85, 5.25, 0, 10.75, 10.75, 1), box(6.15, 9.85, 0, 9.85, 10.75, 1), box(5.25, 6.15, 0, 6.15, 10.75, 1), box(5.25, 5.25, 0, 9.85, 6.15, 1),
						box(5.25, 0, 9.85, 10.75, 1, 10.75), box(9.85, 0, 6.15, 10.75, 1, 9.85), box(6.15, 0, 5.25, 10.75, 1, 6.15), box(5.25, 0, 5.25, 6.15, 1, 9.85), box(6, 8, 6, 10, 10, 10));
				case DOWN -> Shapes.or(box(6, 8, 6, 10, 15, 10), box(6, 6, 10, 10, 10, 15), box(9.85, 5.25, 15, 10.75, 10.75, 16), box(6.15, 5.25, 15, 9.85, 6.15, 16), box(5.25, 5.25, 15, 6.15, 9.85, 16), box(5.25, 9.85, 15, 9.85, 10.75, 16),
						box(5.25, 15, 5.25, 10.75, 16, 6.15), box(9.85, 15, 6.15, 10.75, 16, 9.85), box(6.15, 15, 9.85, 10.75, 16, 10.75), box(5.25, 15, 6.15, 6.15, 16, 10.75), box(6, 6, 6, 10, 8, 10));
			};
		}
		if (state.getValue(BLOCKSTATE) == 8) {
			return switch (state.getValue(FACING)) {
				default -> Shapes.or(box(6, 6, 1, 10, 10, 8), box(6.15, 16, 5.25, 10.75, 17, 6.15), box(9.85, 16, 6.15, 10.75, 17, 10.75), box(6.15, 16, 9.85, 9.85, 17, 10.75), box(5.25, 16, 5.25, 6.15, 17, 10.75), box(6, 10, 6, 10, 16, 10),
						box(5.25, 9.85, 0, 10.75, 10.75, 1), box(5.25, 6.15, 0, 6.15, 9.85, 1), box(5.25, 5.25, 0, 9.85, 6.15, 1), box(9.85, 5.25, 0, 10.75, 9.85, 1), box(1, 6, 6, 8, 10, 10), box(0, 6.15, 9.85, 1, 9.85, 10.75),
						box(0, 9.85, 5.25, 1, 10.75, 10.75), box(0, 5.25, 6.15, 1, 6.15, 10.75), box(0, 5.25, 5.25, 1, 9.85, 6.15), box(6, 6, 8, 10, 10, 15), box(9.85, 5.25, 15, 10.75, 9.85, 16), box(5.25, 9.85, 15, 10.75, 10.75, 16),
						box(5.25, 6.15, 15, 6.15, 9.85, 16), box(5.25, 5.25, 15, 9.85, 6.15, 16));
				case NORTH -> Shapes.or(box(6, 6, 8, 10, 10, 15), box(5.25, 16, 9.85, 9.85, 17, 10.75), box(5.25, 16, 5.25, 6.15, 17, 9.85), box(6.15, 16, 5.25, 9.85, 17, 6.15), box(9.85, 16, 5.25, 10.75, 17, 10.75), box(6, 10, 6, 10, 16, 10),
						box(5.25, 9.85, 15, 10.75, 10.75, 16), box(9.85, 6.15, 15, 10.75, 9.85, 16), box(6.15, 5.25, 15, 10.75, 6.15, 16), box(5.25, 5.25, 15, 6.15, 9.85, 16), box(8, 6, 6, 15, 10, 10), box(15, 6.15, 5.25, 16, 9.85, 6.15),
						box(15, 9.85, 5.25, 16, 10.75, 10.75), box(15, 5.25, 5.25, 16, 6.15, 9.85), box(15, 5.25, 9.85, 16, 9.85, 10.75), box(6, 6, 1, 10, 10, 8), box(5.25, 5.25, 0, 6.15, 9.85, 1), box(5.25, 9.85, 0, 10.75, 10.75, 1),
						box(9.85, 6.15, 0, 10.75, 9.85, 1), box(6.15, 5.25, 0, 10.75, 6.15, 1));
				case EAST -> Shapes.or(box(1, 6, 6, 8, 10, 10), box(5.25, 16, 5.25, 6.15, 17, 9.85), box(6.15, 16, 5.25, 10.75, 17, 6.15), box(9.85, 16, 6.15, 10.75, 17, 9.85), box(5.25, 16, 9.85, 10.75, 17, 10.75), box(6, 10, 6, 10, 16, 10),
						box(0, 9.85, 5.25, 1, 10.75, 10.75), box(0, 6.15, 9.85, 1, 9.85, 10.75), box(0, 5.25, 6.15, 1, 6.15, 10.75), box(0, 5.25, 5.25, 1, 9.85, 6.15), box(6, 6, 8, 10, 10, 15), box(9.85, 6.15, 15, 10.75, 9.85, 16),
						box(5.25, 9.85, 15, 10.75, 10.75, 16), box(6.15, 5.25, 15, 10.75, 6.15, 16), box(5.25, 5.25, 15, 6.15, 9.85, 16), box(8, 6, 6, 15, 10, 10), box(15, 5.25, 5.25, 16, 9.85, 6.15), box(15, 9.85, 5.25, 16, 10.75, 10.75),
						box(15, 6.15, 9.85, 16, 9.85, 10.75), box(15, 5.25, 6.15, 16, 6.15, 10.75));
				case WEST -> Shapes.or(box(8, 6, 6, 15, 10, 10), box(9.85, 16, 6.15, 10.75, 17, 10.75), box(5.25, 16, 9.85, 9.85, 17, 10.75), box(5.25, 16, 6.15, 6.15, 17, 9.85), box(5.25, 16, 5.25, 10.75, 17, 6.15), box(6, 10, 6, 10, 16, 10),
						box(15, 9.85, 5.25, 16, 10.75, 10.75), box(15, 6.15, 5.25, 16, 9.85, 6.15), box(15, 5.25, 5.25, 16, 6.15, 9.85), box(15, 5.25, 9.85, 16, 9.85, 10.75), box(6, 6, 1, 10, 10, 8), box(5.25, 6.15, 0, 6.15, 9.85, 1),
						box(5.25, 9.85, 0, 10.75, 10.75, 1), box(5.25, 5.25, 0, 9.85, 6.15, 1), box(9.85, 5.25, 0, 10.75, 9.85, 1), box(1, 6, 6, 8, 10, 10), box(0, 5.25, 9.85, 1, 9.85, 10.75), box(0, 9.85, 5.25, 1, 10.75, 10.75),
						box(0, 6.15, 5.25, 1, 9.85, 6.15), box(0, 5.25, 5.25, 1, 6.15, 9.85));
				case UP -> Shapes.or(box(6, 1, 6, 10, 8, 10), box(5.25, 5.25, 16, 9.85, 6.15, 17), box(5.25, 6.15, 16, 6.15, 10.75, 17), box(6.15, 9.85, 16, 9.85, 10.75, 17), box(9.85, 5.25, 16, 10.75, 10.75, 17), box(6, 6, 10, 10, 10, 16),
						box(5.25, 0, 9.85, 10.75, 1, 10.75), box(9.85, 0, 6.15, 10.75, 1, 9.85), box(6.15, 0, 5.25, 10.75, 1, 6.15), box(5.25, 0, 5.25, 6.15, 1, 9.85), box(8, 6, 6, 15, 10, 10), box(15, 9.85, 6.15, 16, 10.75, 9.85),
						box(15, 5.25, 9.85, 16, 10.75, 10.75), box(15, 6.15, 5.25, 16, 10.75, 6.15), box(15, 5.25, 5.25, 16, 6.15, 9.85), box(6, 8, 6, 10, 15, 10), box(5.25, 15, 5.25, 6.15, 16, 9.85), box(5.25, 15, 9.85, 10.75, 16, 10.75),
						box(9.85, 15, 6.15, 10.75, 16, 9.85), box(6.15, 15, 5.25, 10.75, 16, 6.15));
				case DOWN -> Shapes.or(box(6, 8, 6, 10, 15, 10), box(5.25, 9.85, -1, 9.85, 10.75, 0), box(5.25, 5.25, -1, 6.15, 9.85, 0), box(6.15, 5.25, -1, 9.85, 6.15, 0), box(9.85, 5.25, -1, 10.75, 10.75, 0), box(6, 6, 0, 10, 10, 6),
						box(5.25, 15, 5.25, 10.75, 16, 6.15), box(9.85, 15, 6.15, 10.75, 16, 9.85), box(6.15, 15, 9.85, 10.75, 16, 10.75), box(5.25, 15, 6.15, 6.15, 16, 10.75), box(8, 6, 6, 15, 10, 10), box(15, 5.25, 6.15, 16, 6.15, 9.85),
						box(15, 5.25, 5.25, 16, 10.75, 6.15), box(15, 5.25, 9.85, 16, 9.85, 10.75), box(15, 9.85, 6.15, 16, 10.75, 10.75), box(6, 1, 6, 10, 8, 10), box(5.25, 0, 6.15, 6.15, 1, 10.75), box(5.25, 0, 5.25, 10.75, 1, 6.15),
						box(9.85, 0, 6.15, 10.75, 1, 9.85), box(6.15, 0, 9.85, 10.75, 1, 10.75));
			};
		}
		if (state.getValue(BLOCKSTATE) == 9) {
			return switch (state.getValue(FACING)) {
				default ->
					Shapes.or(box(6, 6, 1, 10, 10, 8), box(6, 6, 8, 10, 10, 15), box(10, 6, 6, 15, 10, 10), box(6, 10, 6, 10, 16, 10), box(5.25, 16, 5.25, 6.15, 17, 10.75), box(6.15, 16, 5.25, 9.85, 17, 6.15), box(9.85, 16, 5.25, 10.75, 17, 9.85),
							box(6.15, 16, 9.85, 10.75, 17, 10.75), box(5.25, 9.85, 0, 10.75, 10.75, 1), box(5.25, 6.15, 0, 6.15, 9.85, 1), box(5.25, 5.25, 0, 9.85, 6.15, 1), box(9.85, 5.25, 0, 10.75, 9.85, 1), box(15, 9.85, 5.25, 16, 10.75, 10.75),
							box(15, 5.25, 9.85, 16, 9.85, 10.75), box(15, 5.25, 5.25, 16, 6.15, 9.85), box(15, 6.15, 5.25, 16, 9.85, 6.15), box(0, 9.85, 5.25, 1, 10.75, 10.75), box(0, 5.25, 5.25, 1, 9.85, 6.15), box(0, 5.25, 6.15, 1, 6.15, 10.75),
							box(0, 6.15, 9.85, 1, 9.85, 10.75), box(1, 6, 6, 6, 10, 10), box(5.25, 9.85, 15, 10.75, 10.75, 16), box(5.25, 6.15, 15, 6.15, 9.85, 16), box(5.25, 5.25, 15, 9.85, 6.15, 16), box(9.85, 5.25, 15, 10.75, 9.85, 16));
				case NORTH -> Shapes.or(box(6, 6, 8, 10, 10, 15), box(6, 6, 1, 10, 10, 8), box(1, 6, 6, 6, 10, 10), box(6, 10, 6, 10, 16, 10), box(9.85, 16, 5.25, 10.75, 17, 10.75), box(6.15, 16, 9.85, 9.85, 17, 10.75),
						box(5.25, 16, 6.15, 6.15, 17, 10.75), box(5.25, 16, 5.25, 9.85, 17, 6.15), box(5.25, 9.85, 15, 10.75, 10.75, 16), box(9.85, 6.15, 15, 10.75, 9.85, 16), box(6.15, 5.25, 15, 10.75, 6.15, 16), box(5.25, 5.25, 15, 6.15, 9.85, 16),
						box(0, 9.85, 5.25, 1, 10.75, 10.75), box(0, 5.25, 5.25, 1, 9.85, 6.15), box(0, 5.25, 6.15, 1, 6.15, 10.75), box(0, 6.15, 9.85, 1, 9.85, 10.75), box(15, 9.85, 5.25, 16, 10.75, 10.75), box(15, 5.25, 9.85, 16, 9.85, 10.75),
						box(15, 5.25, 5.25, 16, 6.15, 9.85), box(15, 6.15, 5.25, 16, 9.85, 6.15), box(10, 6, 6, 15, 10, 10), box(5.25, 9.85, 0, 10.75, 10.75, 1), box(9.85, 6.15, 0, 10.75, 9.85, 1), box(6.15, 5.25, 0, 10.75, 6.15, 1),
						box(5.25, 5.25, 0, 6.15, 9.85, 1));
				case EAST ->
					Shapes.or(box(1, 6, 6, 8, 10, 10), box(8, 6, 6, 15, 10, 10), box(6, 6, 1, 10, 10, 6), box(6, 10, 6, 10, 16, 10), box(5.25, 16, 9.85, 10.75, 17, 10.75), box(5.25, 16, 6.15, 6.15, 17, 9.85), box(5.25, 16, 5.25, 9.85, 17, 6.15),
							box(9.85, 16, 5.25, 10.75, 17, 9.85), box(0, 9.85, 5.25, 1, 10.75, 10.75), box(0, 6.15, 9.85, 1, 9.85, 10.75), box(0, 5.25, 6.15, 1, 6.15, 10.75), box(0, 5.25, 5.25, 1, 9.85, 6.15), box(5.25, 9.85, 0, 10.75, 10.75, 1),
							box(9.85, 5.25, 0, 10.75, 9.85, 1), box(5.25, 5.25, 0, 9.85, 6.15, 1), box(5.25, 6.15, 0, 6.15, 9.85, 1), box(5.25, 9.85, 15, 10.75, 10.75, 16), box(5.25, 5.25, 15, 6.15, 9.85, 16), box(6.15, 5.25, 15, 10.75, 6.15, 16),
							box(9.85, 6.15, 15, 10.75, 9.85, 16), box(6, 6, 10, 10, 10, 15), box(15, 9.85, 5.25, 16, 10.75, 10.75), box(15, 6.15, 9.85, 16, 9.85, 10.75), box(15, 5.25, 6.15, 16, 6.15, 10.75), box(15, 5.25, 5.25, 16, 9.85, 6.15));
				case WEST -> Shapes.or(box(8, 6, 6, 15, 10, 10), box(1, 6, 6, 8, 10, 10), box(6, 6, 10, 10, 10, 15), box(6, 10, 6, 10, 16, 10), box(5.25, 16, 5.25, 10.75, 17, 6.15), box(9.85, 16, 6.15, 10.75, 17, 9.85),
						box(6.15, 16, 9.85, 10.75, 17, 10.75), box(5.25, 16, 6.15, 6.15, 17, 10.75), box(15, 9.85, 5.25, 16, 10.75, 10.75), box(15, 6.15, 5.25, 16, 9.85, 6.15), box(15, 5.25, 5.25, 16, 6.15, 9.85),
						box(15, 5.25, 9.85, 16, 9.85, 10.75), box(5.25, 9.85, 15, 10.75, 10.75, 16), box(5.25, 5.25, 15, 6.15, 9.85, 16), box(6.15, 5.25, 15, 10.75, 6.15, 16), box(9.85, 6.15, 15, 10.75, 9.85, 16), box(5.25, 9.85, 0, 10.75, 10.75, 1),
						box(9.85, 5.25, 0, 10.75, 9.85, 1), box(5.25, 5.25, 0, 9.85, 6.15, 1), box(5.25, 6.15, 0, 6.15, 9.85, 1), box(6, 6, 1, 10, 10, 6), box(0, 9.85, 5.25, 1, 10.75, 10.75), box(0, 6.15, 5.25, 1, 9.85, 6.15),
						box(0, 5.25, 5.25, 1, 6.15, 9.85), box(0, 5.25, 9.85, 1, 9.85, 10.75));
				case UP ->
					Shapes.or(box(6, 1, 6, 10, 8, 10), box(6, 8, 6, 10, 15, 10), box(1, 6, 6, 6, 10, 10), box(6, 6, 10, 10, 10, 16), box(9.85, 5.25, 16, 10.75, 10.75, 17), box(6.15, 5.25, 16, 9.85, 6.15, 17), box(5.25, 5.25, 16, 6.15, 9.85, 17),
							box(5.25, 9.85, 16, 9.85, 10.75, 17), box(5.25, 0, 9.85, 10.75, 1, 10.75), box(9.85, 0, 6.15, 10.75, 1, 9.85), box(6.15, 0, 5.25, 10.75, 1, 6.15), box(5.25, 0, 5.25, 6.15, 1, 9.85), box(0, 5.25, 9.85, 1, 10.75, 10.75),
							box(0, 9.85, 5.25, 1, 10.75, 9.85), box(0, 5.25, 5.25, 1, 9.85, 6.15), box(0, 5.25, 6.15, 1, 6.15, 9.85), box(15, 5.25, 9.85, 16, 10.75, 10.75), box(15, 5.25, 5.25, 16, 6.15, 9.85), box(15, 6.15, 5.25, 16, 10.75, 6.15),
							box(15, 9.85, 6.15, 16, 10.75, 9.85), box(10, 6, 6, 15, 10, 10), box(5.25, 15, 9.85, 10.75, 16, 10.75), box(9.85, 15, 6.15, 10.75, 16, 9.85), box(6.15, 15, 5.25, 10.75, 16, 6.15), box(5.25, 15, 5.25, 6.15, 16, 9.85));
				case DOWN -> Shapes.or(box(6, 8, 6, 10, 15, 10), box(6, 1, 6, 10, 8, 10), box(1, 6, 6, 6, 10, 10), box(6, 6, 0, 10, 10, 6), box(9.85, 5.25, -1, 10.75, 10.75, 0), box(6.15, 9.85, -1, 9.85, 10.75, 0),
						box(5.25, 6.15, -1, 6.15, 10.75, 0), box(5.25, 5.25, -1, 9.85, 6.15, 0), box(5.25, 15, 5.25, 10.75, 16, 6.15), box(9.85, 15, 6.15, 10.75, 16, 9.85), box(6.15, 15, 9.85, 10.75, 16, 10.75), box(5.25, 15, 6.15, 6.15, 16, 10.75),
						box(0, 5.25, 5.25, 1, 10.75, 6.15), box(0, 5.25, 6.15, 1, 6.15, 10.75), box(0, 6.15, 9.85, 1, 10.75, 10.75), box(0, 9.85, 6.15, 1, 10.75, 9.85), box(15, 5.25, 5.25, 16, 10.75, 6.15), box(15, 9.85, 6.15, 16, 10.75, 10.75),
						box(15, 5.25, 9.85, 16, 9.85, 10.75), box(15, 5.25, 6.15, 16, 6.15, 9.85), box(10, 6, 6, 15, 10, 10), box(5.25, 0, 5.25, 10.75, 1, 6.15), box(9.85, 0, 6.15, 10.75, 1, 9.85), box(6.15, 0, 9.85, 10.75, 1, 10.75),
						box(5.25, 0, 6.15, 6.15, 1, 10.75));
			};
		}
		if (state.getValue(BLOCKSTATE) == 10) {
			return switch (state.getValue(FACING)) {
				default -> Shapes.or(box(6, 6, 1, 10, 10, 8), box(6, 6, 8, 10, 10, 15), box(10, 6, 6, 15, 10, 10), box(6, 1, 6, 10, 7, 10), box(5.25, 0, 5.25, 6.15, 1, 10.75), box(6.15, 0, 5.25, 9.85, 1, 6.15), box(9.85, 0, 5.25, 10.75, 1, 9.85),
						box(6.15, 0, 9.85, 10.75, 1, 10.75), box(5.25, 9.85, 0, 10.75, 10.75, 1), box(5.25, 6.15, 0, 6.15, 9.85, 1), box(5.25, 5.25, 0, 9.85, 6.15, 1), box(9.85, 5.25, 0, 10.75, 9.85, 1), box(15, 9.85, 5.25, 16, 10.75, 10.75),
						box(15, 5.25, 9.85, 16, 9.85, 10.75), box(15, 5.25, 5.25, 16, 6.15, 9.85), box(15, 6.15, 5.25, 16, 9.85, 6.15), box(0, 9.85, 5.25, 1, 10.75, 10.75), box(0, 5.25, 5.25, 1, 9.85, 6.15), box(0, 5.25, 6.15, 1, 6.15, 10.75),
						box(0, 6.15, 9.85, 1, 9.85, 10.75), box(1, 6, 6, 6, 10, 10), box(5.25, 9.85, 15, 10.75, 10.75, 16), box(5.25, 6.15, 15, 6.15, 9.85, 16), box(5.25, 5.25, 15, 9.85, 6.15, 16), box(9.85, 5.25, 15, 10.75, 9.85, 16));
				case NORTH -> Shapes.or(box(6, 6, 8, 10, 10, 15), box(6, 6, 1, 10, 10, 8), box(1, 6, 6, 6, 10, 10), box(6, 1, 6, 10, 7, 10), box(9.85, 0, 5.25, 10.75, 1, 10.75), box(6.15, 0, 9.85, 9.85, 1, 10.75), box(5.25, 0, 6.15, 6.15, 1, 10.75),
						box(5.25, 0, 5.25, 9.85, 1, 6.15), box(5.25, 9.85, 15, 10.75, 10.75, 16), box(9.85, 6.15, 15, 10.75, 9.85, 16), box(6.15, 5.25, 15, 10.75, 6.15, 16), box(5.25, 5.25, 15, 6.15, 9.85, 16), box(0, 9.85, 5.25, 1, 10.75, 10.75),
						box(0, 5.25, 5.25, 1, 9.85, 6.15), box(0, 5.25, 6.15, 1, 6.15, 10.75), box(0, 6.15, 9.85, 1, 9.85, 10.75), box(15, 9.85, 5.25, 16, 10.75, 10.75), box(15, 5.25, 9.85, 16, 9.85, 10.75), box(15, 5.25, 5.25, 16, 6.15, 9.85),
						box(15, 6.15, 5.25, 16, 9.85, 6.15), box(10, 6, 6, 15, 10, 10), box(5.25, 9.85, 0, 10.75, 10.75, 1), box(9.85, 6.15, 0, 10.75, 9.85, 1), box(6.15, 5.25, 0, 10.75, 6.15, 1), box(5.25, 5.25, 0, 6.15, 9.85, 1));
				case EAST -> Shapes.or(box(1, 6, 6, 8, 10, 10), box(8, 6, 6, 15, 10, 10), box(6, 6, 1, 10, 10, 6), box(6, 1, 6, 10, 7, 10), box(5.25, 0, 9.85, 10.75, 1, 10.75), box(5.25, 0, 6.15, 6.15, 1, 9.85), box(5.25, 0, 5.25, 9.85, 1, 6.15),
						box(9.85, 0, 5.25, 10.75, 1, 9.85), box(0, 9.85, 5.25, 1, 10.75, 10.75), box(0, 6.15, 9.85, 1, 9.85, 10.75), box(0, 5.25, 6.15, 1, 6.15, 10.75), box(0, 5.25, 5.25, 1, 9.85, 6.15), box(5.25, 9.85, 0, 10.75, 10.75, 1),
						box(9.85, 5.25, 0, 10.75, 9.85, 1), box(5.25, 5.25, 0, 9.85, 6.15, 1), box(5.25, 6.15, 0, 6.15, 9.85, 1), box(5.25, 9.85, 15, 10.75, 10.75, 16), box(5.25, 5.25, 15, 6.15, 9.85, 16), box(6.15, 5.25, 15, 10.75, 6.15, 16),
						box(9.85, 6.15, 15, 10.75, 9.85, 16), box(6, 6, 10, 10, 10, 15), box(15, 9.85, 5.25, 16, 10.75, 10.75), box(15, 6.15, 9.85, 16, 9.85, 10.75), box(15, 5.25, 6.15, 16, 6.15, 10.75), box(15, 5.25, 5.25, 16, 9.85, 6.15));
				case WEST -> Shapes.or(box(8, 6, 6, 15, 10, 10), box(1, 6, 6, 8, 10, 10), box(6, 6, 10, 10, 10, 15), box(6, 1, 6, 10, 7, 10), box(5.25, 0, 5.25, 10.75, 1, 6.15), box(9.85, 0, 6.15, 10.75, 1, 9.85), box(6.15, 0, 9.85, 10.75, 1, 10.75),
						box(5.25, 0, 6.15, 6.15, 1, 10.75), box(15, 9.85, 5.25, 16, 10.75, 10.75), box(15, 6.15, 5.25, 16, 9.85, 6.15), box(15, 5.25, 5.25, 16, 6.15, 9.85), box(15, 5.25, 9.85, 16, 9.85, 10.75), box(5.25, 9.85, 15, 10.75, 10.75, 16),
						box(5.25, 5.25, 15, 6.15, 9.85, 16), box(6.15, 5.25, 15, 10.75, 6.15, 16), box(9.85, 6.15, 15, 10.75, 9.85, 16), box(5.25, 9.85, 0, 10.75, 10.75, 1), box(9.85, 5.25, 0, 10.75, 9.85, 1), box(5.25, 5.25, 0, 9.85, 6.15, 1),
						box(5.25, 6.15, 0, 6.15, 9.85, 1), box(6, 6, 1, 10, 10, 6), box(0, 9.85, 5.25, 1, 10.75, 10.75), box(0, 6.15, 5.25, 1, 9.85, 6.15), box(0, 5.25, 5.25, 1, 6.15, 9.85), box(0, 5.25, 9.85, 1, 9.85, 10.75));
				case UP -> Shapes.or(box(6, 1, 6, 10, 8, 10), box(6, 8, 6, 10, 15, 10), box(1, 6, 6, 6, 10, 10), box(6, 6, 1, 10, 10, 7), box(9.85, 5.25, 0, 10.75, 10.75, 1), box(6.15, 5.25, 0, 9.85, 6.15, 1), box(5.25, 5.25, 0, 6.15, 9.85, 1),
						box(5.25, 9.85, 0, 9.85, 10.75, 1), box(5.25, 0, 9.85, 10.75, 1, 10.75), box(9.85, 0, 6.15, 10.75, 1, 9.85), box(6.15, 0, 5.25, 10.75, 1, 6.15), box(5.25, 0, 5.25, 6.15, 1, 9.85), box(0, 5.25, 9.85, 1, 10.75, 10.75),
						box(0, 9.85, 5.25, 1, 10.75, 9.85), box(0, 5.25, 5.25, 1, 9.85, 6.15), box(0, 5.25, 6.15, 1, 6.15, 9.85), box(15, 5.25, 9.85, 16, 10.75, 10.75), box(15, 5.25, 5.25, 16, 6.15, 9.85), box(15, 6.15, 5.25, 16, 10.75, 6.15),
						box(15, 9.85, 6.15, 16, 10.75, 9.85), box(10, 6, 6, 15, 10, 10), box(5.25, 15, 9.85, 10.75, 16, 10.75), box(9.85, 15, 6.15, 10.75, 16, 9.85), box(6.15, 15, 5.25, 10.75, 16, 6.15), box(5.25, 15, 5.25, 6.15, 16, 9.85));
				case DOWN -> Shapes.or(box(6, 8, 6, 10, 15, 10), box(6, 1, 6, 10, 8, 10), box(1, 6, 6, 6, 10, 10), box(6, 6, 9, 10, 10, 15), box(9.85, 5.25, 15, 10.75, 10.75, 16), box(6.15, 9.85, 15, 9.85, 10.75, 16),
						box(5.25, 6.15, 15, 6.15, 10.75, 16), box(5.25, 5.25, 15, 9.85, 6.15, 16), box(5.25, 15, 5.25, 10.75, 16, 6.15), box(9.85, 15, 6.15, 10.75, 16, 9.85), box(6.15, 15, 9.85, 10.75, 16, 10.75),
						box(5.25, 15, 6.15, 6.15, 16, 10.75), box(0, 5.25, 5.25, 1, 10.75, 6.15), box(0, 5.25, 6.15, 1, 6.15, 10.75), box(0, 6.15, 9.85, 1, 10.75, 10.75), box(0, 9.85, 6.15, 1, 10.75, 9.85), box(15, 5.25, 5.25, 16, 10.75, 6.15),
						box(15, 9.85, 6.15, 16, 10.75, 10.75), box(15, 5.25, 9.85, 16, 9.85, 10.75), box(15, 5.25, 6.15, 16, 6.15, 9.85), box(10, 6, 6, 15, 10, 10), box(5.25, 0, 5.25, 10.75, 1, 6.15), box(9.85, 0, 6.15, 10.75, 1, 9.85),
						box(6.15, 0, 9.85, 10.75, 1, 10.75), box(5.25, 0, 6.15, 6.15, 1, 10.75));
			};
		}
		if (state.getValue(BLOCKSTATE) == 11) {
			return switch (state.getValue(FACING)) {
				default -> Shapes.or(box(6, 6, 1, 10, 10, 8), box(6, 6, 8, 10, 10, 15), box(6, 6, 8, 10, 10, 15), box(6, 10, 6, 10, 16, 10), box(5.25, 16, 5.25, 6.15, 17, 10.75), box(6.15, 16, 5.25, 9.85, 17, 6.15),
						box(9.85, 16, 5.25, 10.75, 17, 9.85), box(6.15, 16, 9.85, 10.75, 17, 10.75), box(5.25, 9.85, 0, 10.75, 10.75, 1), box(5.25, 6.15, 0, 6.15, 9.85, 1), box(5.25, 5.25, 0, 9.85, 6.15, 1), box(9.85, 5.25, 0, 10.75, 9.85, 1),
						box(5.25, 9.85, 15, 10.75, 10.75, 16), box(5.25, 6.15, 15, 6.15, 9.85, 16), box(5.25, 5.25, 15, 9.85, 6.15, 16), box(9.85, 5.25, 15, 10.75, 9.85, 16));
				case NORTH -> Shapes.or(box(6, 6, 8, 10, 10, 15), box(6, 6, 1, 10, 10, 8), box(6, 6, 1, 10, 10, 8), box(6, 10, 6, 10, 16, 10), box(9.85, 16, 5.25, 10.75, 17, 10.75), box(6.15, 16, 9.85, 9.85, 17, 10.75),
						box(5.25, 16, 6.15, 6.15, 17, 10.75), box(5.25, 16, 5.25, 9.85, 17, 6.15), box(5.25, 9.85, 15, 10.75, 10.75, 16), box(9.85, 6.15, 15, 10.75, 9.85, 16), box(6.15, 5.25, 15, 10.75, 6.15, 16), box(5.25, 5.25, 15, 6.15, 9.85, 16),
						box(5.25, 9.85, 0, 10.75, 10.75, 1), box(9.85, 6.15, 0, 10.75, 9.85, 1), box(6.15, 5.25, 0, 10.75, 6.15, 1), box(5.25, 5.25, 0, 6.15, 9.85, 1));
				case EAST -> Shapes.or(box(1, 6, 6, 8, 10, 10), box(8, 6, 6, 15, 10, 10), box(8, 6, 6, 15, 10, 10), box(6, 10, 6, 10, 16, 10), box(5.25, 16, 9.85, 10.75, 17, 10.75), box(5.25, 16, 6.15, 6.15, 17, 9.85),
						box(5.25, 16, 5.25, 9.85, 17, 6.15), box(9.85, 16, 5.25, 10.75, 17, 9.85), box(0, 9.85, 5.25, 1, 10.75, 10.75), box(0, 6.15, 9.85, 1, 9.85, 10.75), box(0, 5.25, 6.15, 1, 6.15, 10.75), box(0, 5.25, 5.25, 1, 9.85, 6.15),
						box(15, 9.85, 5.25, 16, 10.75, 10.75), box(15, 6.15, 9.85, 16, 9.85, 10.75), box(15, 5.25, 6.15, 16, 6.15, 10.75), box(15, 5.25, 5.25, 16, 9.85, 6.15));
				case WEST -> Shapes.or(box(8, 6, 6, 15, 10, 10), box(1, 6, 6, 8, 10, 10), box(1, 6, 6, 8, 10, 10), box(6, 10, 6, 10, 16, 10), box(5.25, 16, 5.25, 10.75, 17, 6.15), box(9.85, 16, 6.15, 10.75, 17, 9.85),
						box(6.15, 16, 9.85, 10.75, 17, 10.75), box(5.25, 16, 6.15, 6.15, 17, 10.75), box(15, 9.85, 5.25, 16, 10.75, 10.75), box(15, 6.15, 5.25, 16, 9.85, 6.15), box(15, 5.25, 5.25, 16, 6.15, 9.85),
						box(15, 5.25, 9.85, 16, 9.85, 10.75), box(0, 9.85, 5.25, 1, 10.75, 10.75), box(0, 6.15, 5.25, 1, 9.85, 6.15), box(0, 5.25, 5.25, 1, 6.15, 9.85), box(0, 5.25, 9.85, 1, 9.85, 10.75));
				case UP -> Shapes.or(box(6, 1, 6, 10, 8, 10), box(6, 8, 6, 10, 15, 10), box(6, 8, 6, 10, 15, 10), box(6, 6, 10, 10, 10, 16), box(9.85, 5.25, 16, 10.75, 10.75, 17), box(6.15, 5.25, 16, 9.85, 6.15, 17),
						box(5.25, 5.25, 16, 6.15, 9.85, 17), box(5.25, 9.85, 16, 9.85, 10.75, 17), box(5.25, 0, 9.85, 10.75, 1, 10.75), box(9.85, 0, 6.15, 10.75, 1, 9.85), box(6.15, 0, 5.25, 10.75, 1, 6.15), box(5.25, 0, 5.25, 6.15, 1, 9.85),
						box(5.25, 15, 9.85, 10.75, 16, 10.75), box(9.85, 15, 6.15, 10.75, 16, 9.85), box(6.15, 15, 5.25, 10.75, 16, 6.15), box(5.25, 15, 5.25, 6.15, 16, 9.85));
				case DOWN -> Shapes.or(box(6, 8, 6, 10, 15, 10), box(6, 1, 6, 10, 8, 10), box(6, 1, 6, 10, 8, 10), box(6, 6, 0, 10, 10, 6), box(9.85, 5.25, -1, 10.75, 10.75, 0), box(6.15, 9.85, -1, 9.85, 10.75, 0),
						box(5.25, 6.15, -1, 6.15, 10.75, 0), box(5.25, 5.25, -1, 9.85, 6.15, 0), box(5.25, 15, 5.25, 10.75, 16, 6.15), box(9.85, 15, 6.15, 10.75, 16, 9.85), box(6.15, 15, 9.85, 10.75, 16, 10.75), box(5.25, 15, 6.15, 6.15, 16, 10.75),
						box(5.25, 0, 5.25, 10.75, 1, 6.15), box(9.85, 0, 6.15, 10.75, 1, 9.85), box(6.15, 0, 9.85, 10.75, 1, 10.75), box(5.25, 0, 6.15, 6.15, 1, 10.75));
			};
		}
		if (state.getValue(BLOCKSTATE) == 12) {
			return switch (state.getValue(FACING)) {
				default -> Shapes.or(box(6, 6, 1, 10, 10, 8), box(6, 6, 8, 10, 10, 15), box(6, 6, 8, 10, 10, 15), box(6, 1, 6, 10, 6, 10), box(5.25, 0, 5.25, 6.15, 1, 10.75), box(6.15, 0, 5.25, 9.85, 1, 6.15), box(9.85, 0, 5.25, 10.75, 1, 9.85),
						box(6.15, 0, 9.85, 10.75, 1, 10.75), box(5.25, 9.85, 0, 10.75, 10.75, 1), box(5.25, 6.15, 0, 6.15, 9.85, 1), box(5.25, 5.25, 0, 9.85, 6.15, 1), box(9.85, 5.25, 0, 10.75, 9.85, 1), box(5.25, 9.85, 15, 10.75, 10.75, 16),
						box(5.25, 6.15, 15, 6.15, 9.85, 16), box(5.25, 5.25, 15, 9.85, 6.15, 16), box(9.85, 5.25, 15, 10.75, 9.85, 16));
				case NORTH -> Shapes.or(box(6, 6, 8, 10, 10, 15), box(6, 6, 1, 10, 10, 8), box(6, 6, 1, 10, 10, 8), box(6, 1, 6, 10, 6, 10), box(9.85, 0, 5.25, 10.75, 1, 10.75), box(6.15, 0, 9.85, 9.85, 1, 10.75), box(5.25, 0, 6.15, 6.15, 1, 10.75),
						box(5.25, 0, 5.25, 9.85, 1, 6.15), box(5.25, 9.85, 15, 10.75, 10.75, 16), box(9.85, 6.15, 15, 10.75, 9.85, 16), box(6.15, 5.25, 15, 10.75, 6.15, 16), box(5.25, 5.25, 15, 6.15, 9.85, 16), box(5.25, 9.85, 0, 10.75, 10.75, 1),
						box(9.85, 6.15, 0, 10.75, 9.85, 1), box(6.15, 5.25, 0, 10.75, 6.15, 1), box(5.25, 5.25, 0, 6.15, 9.85, 1));
				case EAST -> Shapes.or(box(1, 6, 6, 8, 10, 10), box(8, 6, 6, 15, 10, 10), box(8, 6, 6, 15, 10, 10), box(6, 1, 6, 10, 6, 10), box(5.25, 0, 9.85, 10.75, 1, 10.75), box(5.25, 0, 6.15, 6.15, 1, 9.85), box(5.25, 0, 5.25, 9.85, 1, 6.15),
						box(9.85, 0, 5.25, 10.75, 1, 9.85), box(0, 9.85, 5.25, 1, 10.75, 10.75), box(0, 6.15, 9.85, 1, 9.85, 10.75), box(0, 5.25, 6.15, 1, 6.15, 10.75), box(0, 5.25, 5.25, 1, 9.85, 6.15), box(15, 9.85, 5.25, 16, 10.75, 10.75),
						box(15, 6.15, 9.85, 16, 9.85, 10.75), box(15, 5.25, 6.15, 16, 6.15, 10.75), box(15, 5.25, 5.25, 16, 9.85, 6.15));
				case WEST -> Shapes.or(box(8, 6, 6, 15, 10, 10), box(1, 6, 6, 8, 10, 10), box(1, 6, 6, 8, 10, 10), box(6, 1, 6, 10, 6, 10), box(5.25, 0, 5.25, 10.75, 1, 6.15), box(9.85, 0, 6.15, 10.75, 1, 9.85), box(6.15, 0, 9.85, 10.75, 1, 10.75),
						box(5.25, 0, 6.15, 6.15, 1, 10.75), box(15, 9.85, 5.25, 16, 10.75, 10.75), box(15, 6.15, 5.25, 16, 9.85, 6.15), box(15, 5.25, 5.25, 16, 6.15, 9.85), box(15, 5.25, 9.85, 16, 9.85, 10.75), box(0, 9.85, 5.25, 1, 10.75, 10.75),
						box(0, 6.15, 5.25, 1, 9.85, 6.15), box(0, 5.25, 5.25, 1, 6.15, 9.85), box(0, 5.25, 9.85, 1, 9.85, 10.75));
				case UP -> Shapes.or(box(6, 1, 6, 10, 8, 10), box(6, 8, 6, 10, 15, 10), box(6, 8, 6, 10, 15, 10), box(6, 6, 1, 10, 10, 6), box(9.85, 5.25, 0, 10.75, 10.75, 1), box(6.15, 5.25, 0, 9.85, 6.15, 1), box(5.25, 5.25, 0, 6.15, 9.85, 1),
						box(5.25, 9.85, 0, 9.85, 10.75, 1), box(5.25, 0, 9.85, 10.75, 1, 10.75), box(9.85, 0, 6.15, 10.75, 1, 9.85), box(6.15, 0, 5.25, 10.75, 1, 6.15), box(5.25, 0, 5.25, 6.15, 1, 9.85), box(5.25, 15, 9.85, 10.75, 16, 10.75),
						box(9.85, 15, 6.15, 10.75, 16, 9.85), box(6.15, 15, 5.25, 10.75, 16, 6.15), box(5.25, 15, 5.25, 6.15, 16, 9.85));
				case DOWN -> Shapes.or(box(6, 8, 6, 10, 15, 10), box(6, 1, 6, 10, 8, 10), box(6, 1, 6, 10, 8, 10), box(6, 6, 10, 10, 10, 15), box(9.85, 5.25, 15, 10.75, 10.75, 16), box(6.15, 9.85, 15, 9.85, 10.75, 16),
						box(5.25, 6.15, 15, 6.15, 10.75, 16), box(5.25, 5.25, 15, 9.85, 6.15, 16), box(5.25, 15, 5.25, 10.75, 16, 6.15), box(9.85, 15, 6.15, 10.75, 16, 9.85), box(6.15, 15, 9.85, 10.75, 16, 10.75),
						box(5.25, 15, 6.15, 6.15, 16, 10.75), box(5.25, 0, 5.25, 10.75, 1, 6.15), box(9.85, 0, 6.15, 10.75, 1, 9.85), box(6.15, 0, 9.85, 10.75, 1, 10.75), box(5.25, 0, 6.15, 6.15, 1, 10.75));
			};
		}
		return switch (state.getValue(FACING)) {
			default -> box(6, 6, 6, 10, 10, 10);
			case NORTH -> box(6, 6, 6, 10, 10, 10);
			case EAST -> box(6, 6, 6, 10, 10, 10);
			case WEST -> box(6, 6, 6, 10, 10, 10);
			case UP -> box(6, 6, 6, 10, 10, 10);
			case DOWN -> box(6, 6, 6, 10, 10, 10);
		};
	}

	@Override
	protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
		super.createBlockStateDefinition(builder);
		builder.add(FACING, BLOCKSTATE);
	}

	@Override
	public BlockState getStateForPlacement(BlockPlaceContext context) {
		return super.getStateForPlacement(context).setValue(FACING, context.getClickedFace());
	}

	public BlockState rotate(BlockState state, Rotation rot) {
		return state.setValue(FACING, rot.rotate(state.getValue(FACING)));
	}

	public BlockState mirror(BlockState state, Mirror mirrorIn) {
		return state.rotate(mirrorIn.getRotation(state.getValue(FACING)));
	}

	@Override
	public void onPlace(BlockState blockstate, Level world, BlockPos pos, BlockState oldState, boolean moving) {
		super.onPlace(blockstate, world, pos, oldState, moving);
		CopperPipingNeighbourBlockChangesProcedure.execute(world, pos.getX(), pos.getY(), pos.getZ());
	}

	@Override
	public void neighborChanged(BlockState blockstate, Level world, BlockPos pos, Block neighborBlock, BlockPos fromPos, boolean moving) {
		super.neighborChanged(blockstate, world, pos, neighborBlock, fromPos, moving);
		CopperPipingNeighbourBlockChangesProcedure.execute(world, pos.getX(), pos.getY(), pos.getZ());
	}

	@Override
	public MenuProvider getMenuProvider(BlockState state, Level worldIn, BlockPos pos) {
		BlockEntity tileEntity = worldIn.getBlockEntity(pos);
		return tileEntity instanceof MenuProvider menuProvider ? menuProvider : null;
	}

	@Override
	public BlockEntity newBlockEntity(BlockPos pos, BlockState state) {
		return new CopperPipingBlockEntity(pos, state);
	}

	@Override
	public boolean triggerEvent(BlockState state, Level world, BlockPos pos, int eventID, int eventParam) {
		super.triggerEvent(state, world, pos, eventID, eventParam);
		BlockEntity blockEntity = world.getBlockEntity(pos);
		return blockEntity != null && blockEntity.triggerEvent(eventID, eventParam);
	}

	@Override
	public void onRemove(BlockState state, Level world, BlockPos pos, BlockState newState, boolean isMoving) {
		if (state.getBlock() != newState.getBlock()) {
			BlockEntity blockEntity = world.getBlockEntity(pos);
			if (blockEntity instanceof CopperPipingBlockEntity be) {
				Containers.dropContents(world, pos, be);
				world.updateNeighbourForOutputSignal(pos, this);
			}
			super.onRemove(state, world, pos, newState, isMoving);
		}
	}

	@Override
	public boolean hasAnalogOutputSignal(BlockState state) {
		return true;
	}

	@Override
	public int getAnalogOutputSignal(BlockState blockState, Level world, BlockPos pos) {
		BlockEntity tileentity = world.getBlockEntity(pos);
		if (tileentity instanceof CopperPipingBlockEntity be)
			return AbstractContainerMenu.getRedstoneSignalFromContainer(be);
		else
			return 0;
	}
}